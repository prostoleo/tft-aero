$breakpoints: (
	sm: 450px,
	2sm: 650px,
	med: 768px,
	lg: 950px,
	xl: 1200px,
	2xl: 1366px,
	3xl: 1600px,
	4xl: 1800px,
);

$maw-container: 1120px;
$max-width: 1120;
$min-width: 320;

@mixin mq($key) {
	$size: map-get($breakpoints, $key);

	@if $size {
		@media only screen and (min-width: $size) {
			@content;
		}
	} @else {
		@media only screen and (min-width: $key) {
			@content;
		}
	}
}

@mixin mqOnValue($size) {
	@media only screen and (min-width: #{$size}px) {
		@content;
	}
}

$med: 600px;
$lg: 900px;
$xlg: 1200px;

@mixin mqMy($size) {
	@media (min-width: $size) {
		@content;
	}
}

//! работает
@mixin for-size($size) {
	@if $size == phone-only {
		@media (max-width: 599px) {
			@content;
		}
	} @else if $size == tablet-portrait-up {
		@media (min-width: 600px) {
			@content;
		}
	} @else if $size == tablet-landscape-up {
		@media (min-width: 900px) {
			@content;
		}
	} @else if $size == desktop-up {
		@media (min-width: 1200px) {
			@content;
		}
	} @else if $size == big-desktop-up {
		@media (min-width: 1800px) {
			@content;
		}
	}
}

//! работает - передаем свойство - минимальное
@mixin adaptive-value($property, $pcSize, $mobSize) {
	$addSize: $pcSize - $mobSize;
	$maxWidth: $max-width - 320;

	#{$property}: calc(
		#{$mobSize}px + #{$addSize} * ((100vw - 320px) / #{($maxWidth)})
	);
}

@mixin adaptive-value-min-max($property, $mobSize, $pcSize) {
	$addSize: $pcSize - $mobSize;
	$maxWidth: $max-width - 320;

	@media (min-width: #{$max-width}px) {
		#{$property}: #{$pcSize}px;
	}

	@media (max-width: #{$min-width}px) {
		#{$property}: #{$mobSize}px;
	}

	#{$property}: calc(
		#{$mobSize}px + #{$addSize} * ((100vw - 320px) / #{($maxWidth)})
	);
}

@mixin pseudo($content: '', $pos: absolute, $display: block) {
	content: $content;
	display: $display;
	position: $pos;
}

@mixin abs-position($top, $right, $bottom, $left) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

@mixin responsive-ratio($x, $y, $pseudo: false) {
	$padding: unquote(($y / $x) * 100 + '%');
	@if $pseudo {
		&:before {
			@include pseudo($pos: relative);
			width: 100%;
			padding-top: $padding;
		}
	} @else {
		padding-top: $padding;
	}
}

@mixin aspect-ratio($width, $height) {
	position: relative;

	&:before {
		display: block;
		content: '';
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}
	> * {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		height: 100%;
		width: 100%;
	}
}
